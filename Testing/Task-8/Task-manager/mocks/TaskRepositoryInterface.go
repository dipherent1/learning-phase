// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "tskmgr/Domain"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskRepositoryInterface is an autogenerated mock type for the TaskRepositoryInterface type
type TaskRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *TaskRepositoryInterface) Create(task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Task) (*domain.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*domain.Task) *domain.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: title
func (_m *TaskRepositoryInterface) DeleteTask(title string) error {
	ret := _m.Called(title)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields:
func (_m *TaskRepositoryInterface) GetAllTasks() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: title
func (_m *TaskRepositoryInterface) GetByTitle(title string) (*domain.Task, error) {
	ret := _m.Called(title)

	if len(ret) == 0 {
		panic("no return value specified for GetByTitle")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Task, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Task); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTasks provides a mock function with given fields: userid
func (_m *TaskRepositoryInterface) GetUserTasks(userid primitive.ObjectID) ([]domain.Task, error) {
	ret := _m.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) ([]domain.Task, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []domain.Task); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: title, task
func (_m *TaskRepositoryInterface) UpdateTask(title string, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(title, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *domain.Task) (*domain.Task, error)); ok {
		return rf(title, task)
	}
	if rf, ok := ret.Get(0).(func(string, *domain.Task) *domain.Task); ok {
		r0 = rf(title, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *domain.Task) error); ok {
		r1 = rf(title, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepositoryInterface creates a new instance of TaskRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryInterface {
	mock := &TaskRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
